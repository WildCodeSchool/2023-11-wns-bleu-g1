name: 'test-back'

on:
  pull_request:
#  workflow_call:
#    inputs:
#      image_name:
#        type: string
#        required: true
#    secrets:
#      DOCKERHUB_USERNAME:
#        required: true
#      DOCKERHUB_PASSWORD:
#        required: true

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Get the code
        uses: actions/checkout@v4
      - name: Install nodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Make envfile
        run: cp .env.example .env
      - name: Install deps
        run: npm ci
      - name: Start test DB
        run: npm run testDb:wait
      - name: Run tests
        run: npm test
  e2e-test:
    needs: integration-tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./test-e2e
    steps:
      - name: Get the code
        uses: actions/checkout@v4
      - name: Layers cache
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
      - name: Install nodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install deps
        run: npm ci
      - name: Install backend deps
        run: cd ../backend && npm ci
      - name: Store Playwright's Version
        run: |
          PLAYWRIGHT_VERSION=$(npm ls @playwright/test | grep @playwright | sed 's/.*@//')
          echo "Playwright's Version: $PLAYWRIGHT_VERSION"
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV
      - name: Cache Playwright Browsers for Playwright's Version
        id: cache-playwright-browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}
      - name: Setup Playwright
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
      - name: Make envfiles
        run: |
          cp .env.example .env
          cd ../backend/ && cp .env.example .env
          cd ../frontend/ && cp .env.example .env
      - name: Start app
        run: npm run app:start
      - name: Run Playwright tests
        run: npm run test
      - name: Store Artifacts from Failed Tests
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: test-results/
          retention-days: 7
  build-and-push-frontend:
    needs: e2e-test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Qemu
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          context: "{{defaultContext}}:backend"
          file: "Dockerfile.production"
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/wildCodeOnline-backend:latest
          cache-from: type=gha
          cache-to: type=gha, mode=max
